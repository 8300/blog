嵌入式应用编程
							--编著联系方式：8300.github.io
Table of Contents
1.  交叉编译工具使用	2
1.1.  工具获取	2
1.2.  工具配置	2
1.2.1.  新建目录	2
1.2.2.  创建软连接	2
1.2.3.  设置搜索路径	3
1.3.  常见问题	3
1.3.1.   No such file or path	3
1.3.2.  error while loading shared libraries: libz.so.1: cannot open shared object file	3
1.4.  编译程序	3
2.  运行程序	3
2.1.  程序安装	3
2.2.  程序运行	3
2.2.1.  telnet登录	3
2.2.2.  ssh登录	3
2.2.3.  程序执行	4
3.  linux常用命令	4
3.1.  apt（软件管理）	4
3.1.1.  软件搜索	4
3.1.2.  软件安装	4
3.2.  make(编译)	4
3.2.1.  配置文件编写	4
3.2.2.  编译	4
3.3.  grep(文件内搜索)	4
3.4.  telnet(远程登录)	4
3.5.  scp（远程服务）	5
3.5.1.  远程登录	5
3.5.2.  远程拷贝	5
4.  动态库使用	5
4.1.  动态库安装	5
4.2.  程序源码	5
4.3.  编译脚本编写（make）	6
4.4.  编译	6
4.5.  运行	6

1. 交叉编译工具使用

1.1. 工具获取
交叉编译工具一般有两种方式。如果是购买的开发板或设备，找购买商索要。如果是自己画的开发板，则需要找系统移植工程师要当初他编译的工具或参数。
1.2. 工具配置
为方便使用需要配置工具路径。如果有相同名称工具在宿主机上，则必须新建目录，然后在目录内新建软连接。
cd arm-linux
1.2.1. 新建目录
mkdir bin
1.2.2. 创建软连接
sudo ln -s source/bin/arm-linux-gnueabihf-gcc bin/arm-4.7-gcc        
sudo ln -s source/bin/arm-linux-gnueabihf-g++ bin/arm-4.7-g++        
sudo ln -s source/bin/arm-linux-gnueabihf-ar bin/arm-4.7-ar  
sudo ln -s source/bin/arm-linux-gnueabihf-nm bin/arm-4.7-nm  
sudo ln -s source/bin/arm-linux-gnueabihf-ld bin/arm-4.7-ld 
sudo ln -s source/bin/arm-linux-gnueabihf-ldd bin/arm-4.7-ldd 
sudo ln -s source/bin/arm-linux-gnueabihf-objcopy bin/arm-4.7-objcopy 
sudo ln -s source/bin/arm-linux-gnueabihf-objdump bin/arm-4.7-objdump
sudo ln -s source/bin/arm-linux-gnueabihf-strip bin/arm-4.7-strip 
sudo ln -s source/bin/arm-linux-gnueabihf-ranlib bin/arm-4.7-ranlib
sudo ln -s source/bin/arm-linux-gnueabihf-readelf bin/arm-4.7-readelf
sudo ln -s source/bin/arm-linux-gnueabihf-size bin/arm-4.7-size
1.2.3. 设置搜索路径
sudo vi ~/.bashrc
export PATH=$PATH:/home/ts/gitee/arm-4.7-gcc/bin/ 
1.3. 常见问题
1.3.1.  No such file or path
sudo apt install lib32ncurses-dev
1.3.2. error while loading shared libraries: libz.so.1: cannot open shared object file
sudo apt-get install lib32z1
1.4. 编译程序
 arm-4.7-gcc test.c -o test
2. 运行程序
2.1. 程序安装
简单程序的安装只需要将程序拷贝到设备中即可，设备一般支持ssh协议。
命令：scp <source> <account>@<ip>:<destination>
示例：scp bin/test root@192.168.3.133:/ts/proc
2.2. 程序运行
简单程序的运行只需要登录设备系统中，直接运行即可，设备一般支持telnet/ssh协议。
2.2.1. telnet登录
telnet <ip>
eg:
telnet 192.168.1.111
2.2.2. ssh登录
ssh <account>@<ip> 
eg:
ssh root@192.167.2.111
2.2.3. 程序执行
cd到程序目录下
赋予运行权限：chmod +x <program>
运行：./<program>
3. linux常用命令
3.1. apt（软件管理）
3.1.1. 软件搜索
apt-cache search <name>
3.1.2. 软件安装
sudo apt install libjson-c-dev
3.2. make(编译)
3.2.1. 配置文件编写
vi makefile
gcc test.c -o test
3.2.2. 编译
Make
3.3. grep(文件内搜索)
grep -rn <string>
3.4. telnet(远程登录)
telnet <ip>
eg:
telnet 192.168.1.111
3.5. scp（远程服务）
3.5.1. 远程登录
ssh <account>@<ip> 
eg:
ssh root@192.167.2.111
3.5.2. 远程拷贝
scp <source> <account>@<ip>:<destination>
eg:
scp bin/test root@192.168.2.22:/ts/proc
4. 动态库使用
4.1. 动态库安装
sudo apt install libjson-c-dev 
4.2. 程序源码
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include "json.h"

int main()
{
	int rc = 0;
	json_object *obj = NULL;

	obj = json_object_new_object();
	json_object_object_add(obj, "test", json_object_new_string("sss"));
	printf("json:\n%s\n", json_object_get_string(obj));
err:
	return rc;
}
4.3. 编译脚本编写（make）
vi makefile
all:
	gcc -g test.c -o test -I/usr/include/json-c -ljson-c
4.4. 编译
make
4.5. 运行
./test
结果如下：
json:
{ "test": "sss" }
